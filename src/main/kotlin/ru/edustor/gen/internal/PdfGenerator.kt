package ru.edustor.gen.internal

import com.itextpdf.io.font.PdfEncodings
import com.itextpdf.kernel.color.Color
import com.itextpdf.kernel.font.PdfFontFactory
import com.itextpdf.kernel.geom.PageSize
import com.itextpdf.kernel.geom.Rectangle
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.kernel.pdf.canvas.PdfCanvas
import com.itextpdf.kernel.pdf.canvas.PdfCanvasConstants
import org.springframework.context.annotation.PropertySource
import org.springframework.stereotype.Component
import ru.edustor.gen.EdustorGenApplication
import ru.edustor.gen.util.EdustorPageId
import ru.edustor.gen.util.drawGrid
import ru.edustor.gen.util.getGridBorders
import java.io.OutputStream
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

@Component
open class PdfGenerator(val edustorGenApplication: EdustorGenApplication) {
    fun makePdf(outputStream: OutputStream, pageCount: Int) {
        val pdfWriter = PdfWriter(outputStream)
        val pdfDocument = PdfDocument(pdfWriter)

        val fontBytes = this.javaClass.getResource("/fonts/Proxima Nova Thin.ttf").readBytes()
        val proximaNovaFont = PdfFontFactory.createFont(fontBytes, PdfEncodings.IDENTITY_H, true, true)

        val LR_MARGIN = 15f
        val TOP_MARGIN = 15f
        val BOTTOM_MARGIN = 15f

        val ps = PageSize.A4

        val effectiveArea = ps.clone().applyMargins<Rectangle>(TOP_MARGIN, LR_MARGIN, BOTTOM_MARGIN, LR_MARGIN, false)

        val gridSquareSide = 14
        val allowedGridArea = effectiveArea.clone().applyMargins<Rectangle>(3f, 0f, 8f, 0f, false)
        val effectiveGridArea = getGridBorders(allowedGridArea, gridSquareSide.toFloat())

        val now = LocalDateTime.now(ZoneId.of("Europe/Moscow")).withNano(0)
        val nowStr = "${now.format(DateTimeFormatter.ISO_LOCAL_DATE)} ${now.format(DateTimeFormatter.ISO_LOCAL_TIME)} MSK"

        for (i in 1..pageCount) {
            val pageId = EdustorPageId()

            val page = pdfDocument.addNewPage(ps)
            val canvas = PdfCanvas(page)
                    .setLineWidth(0.1f)
                    .setStrokeColor(Color.GRAY)
                    .setLineJoinStyle(PdfCanvasConstants.LineJoinStyle.MITER)

            canvas.drawGrid(effectiveGridArea, gridSquareSide)

            val topIdString = "${pageId.shortHumanReadableId}   #__________"
            val topFontSize = 11f
            canvas.beginText()
                    .setFontAndSize(proximaNovaFont, topFontSize)
                    .moveText(effectiveGridArea.left.toDouble(), effectiveGridArea.top.toDouble() + 3)
                    .showText("Edustor Alpha")
                    .endText()

            canvas.beginText()
                    .moveText(effectiveGridArea.right.toDouble() - proximaNovaFont.getWidth(topIdString, topFontSize),
                            effectiveGridArea.top.toDouble() + 3)
                    .showText(topIdString)
                    .endText()

            canvas.beginText()
                    .setFontAndSize(proximaNovaFont, 8f)
                    .moveText(effectiveGridArea.left.toDouble(), effectiveGridArea.bottom.toDouble() - 8.0)
                    .showText("Generated by Edustor PDFG Microservice v${edustorGenApplication.version} " +
                            "on $nowStr Â© Edustor Project. Dmitry Romanov, 2016")
                    .endText()
        }
//        canvas.concatMatrix(1.0, 0.0, 0.0, 1.0, 0.0, ps.height.toDouble())
        pdfDocument.close()
    }
}
